
    #
    #
    #    ####     ####     #        ####
    #   #    #   #    #    #       #    #
    #        #   #       #####     #    #
    #    #####    ####     #       #    #
    #   #    #        #    #       #    #
    #   #    #   #    #    #    #  #    #
    #    #####    ####      ####    ####

[About]
lc32 is an emulator for the Lasto Core 32 CPU. The lc32 implementation is written in C.
Lasto Core 32 was made by Xi816 & FedouM. It is a first generation of the Lasto Core CPU.

[Registers]
Right now Lasto Core 32 has these registers:
  General purpose: A, B, C, D
  Flags:           F
  Stack pointer:   SP
  Program counter: PC
This may change in the future.

[Instructions]
Lasto Core 32 is have these instructions:
  BR     Branch
  LD     Load to register
  ADD    Add values
  SUB    Subtract values
  MUL    Multiply values
  DIV    Divide values
  LDR    Load register indirect
  ST     Store
  STP    Stop
  BRK    Break (non-maskable interrupt)
  BRZ    Break if zero
  CPR    Compare register

[Hello World Output]
To output hello world on Lasto Assembly (yes lasm exists ??? wait what, no it doesn't ???) you need input this:
  LD D, HW    ; load string address to D
  LOOP:
    LDR D, A  ; load [D] to A
    INR DIV   ; increment D
    CPR A, 0  ; compare char with \0 (NUL)
    BRZ END   ; branch if zero/equal
    ST A, byte #F00000  ; load the character to the interrupt argument table
    INT 1   ; output char
  BR LOOP   ; loop
  END:
    STP
  HW: B "Hello, World!\n\0"
This is code is outputting "Hello, World!".

Here's an example, this code is an infinite loop on NASM (x86-16 with no OS), like:
  org 0x7C00
  bits 16

  main:
    hlt    ; stop working CPU in vm

  .halt:
    jmp .halt  ; making a infinity jump to .halt
This code is outputing none, but making a infinity loop.

[NASM vs LASM]
NASM is good assembly, LASM too.
Here is the Hello World on NASM x86-16 with no OS:
  bits 16
  org 0x7C00

  jmp start
  
  putchar:
    mov ah, 0x0E
    mov bh, 0
    int 10h
    ret
  
  puts:
  .loop:
    lodsb
    or al, al
    jz .done
    call putchar
    inc dx
    jmp .loop
  .done:
    ret

  start:
    mov ax, 0
    mov ds, ax
    mov es, ax

    mov ss, ax
    mov sp, 0x7C00

    mov si, msg00
    call puts


  .done:
    hlt
    jmp .halt

  .halt:
    jmp .halt

  msg00: db Hello World!, 0x0A, 0x0D, 0x00 

  times 510-($-$$) db 0x00
  dw 0AA55h
